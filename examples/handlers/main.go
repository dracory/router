package main

import (
	"fmt"
	"log"
	"net/http"

	rtr "github.com/dracory/rtr"
)

func main() {
	// Create a new router
	r := rtr.NewRouter()

	// Root route that shows all available handler examples
	r.AddRoute(rtr.NewRoute().
		SetMethod(http.MethodGet).
		SetPath("/").
		SetHandler(func(w http.ResponseWriter, req *http.Request) {
			w.Header().Set("Content-Type", "text/html; charset=utf-8")
			fmt.Fprint(w, `<!DOCTYPE html>
<html>
<head>
    <title>Handler Types Example</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
        h1 { color: #2c3e50; }
        .handler-type { 
            background: #f8f9fa; 
            border-left: 4px solid #3498db; 
            padding: 15px; 
            margin: 15px 0; 
            border-radius: 0 4px 4px 0;
        }
        .handler-type h3 { margin-top: 0; color: #2c3e50; }
        .handler-type a { 
            color: #3498db; 
            text-decoration: none; 
            font-weight: bold;
            display: inline-block;
            margin: 5px 10px 5px 0;
        }
        .handler-type a:hover { text-decoration: underline; }
        .description { color: #7f8c8d; margin: 5px 0; }
    </style>
</head>
<body>
    <h1>Handler Types Example</h1>
    <p>This example demonstrates different handler types available in the RTR router.</p>
    
    <div class="handler-type">
        <h3>Traditional Handler</h3>
        <p class="description">Standard HTTP handler with full control over response</p>
        <a href="/traditional">View Example</a>
    </div>
    
    <div class="handler-type">
        <h3>HTMLHandler</h3>
        <p class="description">Returns HTML string, automatically sets Content-Type: text/html</p>
        <a href="/html">Static HTML</a>
        <a href="/user/123">Dynamic HTML with params</a>
    </div>
    
    <div class="handler-type">
        <h3>JSONHandler</h3>
        <p class="description">Returns JSON string, automatically sets Content-Type: application/json</p>
        <a href="/api/users">Static JSON</a>
        <a href="/api/status">Dynamic JSON</a>
        <a href="/api/user/456">JSON with params</a>
    </div>
    
    <div class="handler-type">
        <h3>CSSHandler</h3>
        <p class="description">Returns CSS string, automatically sets Content-Type: text/css</p>
        <a href="/styles.css">CSS Stylesheet</a>
    </div>
    
    <div class="handler-type">
        <h3>XMLHandler</h3>
        <p class="description">Returns XML string, automatically sets Content-Type: application/xml</p>
        <a href="/api/data.xml">XML Data</a>
    </div>
    
    <div class="handler-type">
        <h3>TextHandler</h3>
        <p class="description">Returns plain text, automatically sets Content-Type: text/plain</p>
        <a href="/robots.txt">Robots.txt</a>
    </div>
    
    <div class="handler-type">
        <h3>Handler Priority Demo</h3>
        <p class="description">Shows how handler priority works when multiple handlers are set</p>
        <a href="/priority-demo">Priority Example</a>
    </div>
</body>
</html>`)
		}))

	// Example 1: Traditional Handler (standard HTTP handler)
	r.AddRoute(rtr.NewRoute().
		SetMethod(http.MethodGet).
		SetPath("/traditional").
		SetHandler(func(w http.ResponseWriter, req *http.Request) {
			w.Header().Set("Content-Type", "text/html; charset=utf-8")
			w.Write([]byte("<h1>Welcome to RTR Router!</h1><p>This is a traditional handler with full control.</p>"))
		}))

	// Example 2: HTMLHandler - just return HTML string
	r.AddRoute(rtr.NewRoute().
		SetMethod(http.MethodGet).
		SetPath("/html").
		SetHTMLHandler(func(w http.ResponseWriter, req *http.Request) string {
			return `<!DOCTYPE html>
<html>
<head>
    <title>HTML Handler Example</title>
</head>
<body>
    <h1>HTML Handler</h1>
    <p>This HTML was generated by an HTMLHandler that just returns a string!</p>
    <p>The Content-Type header is automatically set to "text/html; charset=utf-8"</p>
</body>
</html>`
		}))

	// Example 3: JSONHandler - just return JSON string
	r.AddRoute(rtr.NewRoute().
		SetMethod(http.MethodGet).
		SetPath("/api/users").
		SetJSONHandler(func(w http.ResponseWriter, req *http.Request) string {
			return `{
    "users": [
        {"id": 1, "name": "Alice", "email": "alice@example.com"},
        {"id": 2, "name": "Bob", "email": "bob@example.com"}
    ],
    "total": 2
}`
		}))

	// Example 4: JSONHandler with dynamic content
	r.AddRoute(rtr.NewRoute().
		SetMethod(http.MethodGet).
		SetPath("/api/status").
		SetJSONHandler(func(w http.ResponseWriter, req *http.Request) string {
			return fmt.Sprintf(`{
    "status": "ok",
    "timestamp": "%s",
    "server": "rtr-router"
}`, "2024-01-01T12:00:00Z")
		}))

	// Example 5: CSSHandler - return CSS string
	r.AddRoute(rtr.NewRoute().
		SetMethod(http.MethodGet).
		SetPath("/styles.css").
		SetCSSHandler(func(w http.ResponseWriter, req *http.Request) string {
			return `body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    margin: 0;
    padding: 20px;
}

h1 {
    color: #333;
    border-bottom: 2px solid #007acc;
}

.container {
    max-width: 800px;
    margin: 0 auto;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}`
		}))

	// Example 6: XMLHandler - return XML string
	r.AddRoute(rtr.NewRoute().
		SetMethod(http.MethodGet).
		SetPath("/api/data.xml").
		SetXMLHandler(func(w http.ResponseWriter, req *http.Request) string {
			return `<?xml version="1.0" encoding="UTF-8"?>
<data>
    <users>
        <user id="1">
            <name>Alice</name>
            <email>alice@example.com</email>
        </user>
        <user id="2">
            <name>Bob</name>
            <email>bob@example.com</email>
        </user>
    </users>
</data>`
		}))

	// Example 7: TextHandler - return plain text
	r.AddRoute(rtr.NewRoute().
		SetMethod(http.MethodGet).
		SetPath("/robots.txt").
		SetTextHandler(func(w http.ResponseWriter, req *http.Request) string {
			return `User-agent: *
Disallow: /admin/
Disallow: /private/
Allow: /

Sitemap: https://example.com/sitemap.xml`
		}))

	// Example 8: Multiple handler types on same route (priority demonstration)
	r.AddRoute(rtr.NewRoute().
		SetMethod(http.MethodGet).
		SetPath("/priority-demo").
		SetHTMLHandler(func(w http.ResponseWriter, req *http.Request) string {
			return "<h1>HTML Handler</h1><p>This is returned because HTMLHandler has higher priority than JSONHandler</p>"
		}).
		SetJSONHandler(func(w http.ResponseWriter, req *http.Request) string {
			return `{"message": "This JSON won't be returned because HTMLHandler has priority"}`
		}))

	// Example 9: Route with parameters using HTMLHandler
	r.AddRoute(rtr.NewRoute().
		SetMethod(http.MethodGet).
		SetPath("/user/:id").
		SetHTMLHandler(func(w http.ResponseWriter, req *http.Request) string {
			userID := rtr.MustGetParam(req, "id")
			return fmt.Sprintf(`<!DOCTYPE html>
<html>
<head>
    <title>User Profile</title>
</head>
<body>
    <h1>User Profile</h1>
    <p>User ID: %s</p>
    <p>This demonstrates HTMLHandler with URL parameters!</p>
</body>
</html>`, userID)
		}))

	// Example 10: Route with parameters using JSONHandler
	r.AddRoute(rtr.NewRoute().
		SetMethod(http.MethodGet).
		SetPath("/api/user/:id").
		SetJSONHandler(func(w http.ResponseWriter, req *http.Request) string {
			userID := rtr.MustGetParam(req, "id")
			return fmt.Sprintf(`{
    "user": {
        "id": "%s",
        "name": "User %s",
        "profile_url": "/user/%s"
    }
}`, userID, userID, userID)
		}))

	// Start the server
	port := ":8080"
	fmt.Printf("Server running on http://localhost%s\n", port)
	fmt.Println("Handler Types Example")
	fmt.Println("====================")
	fmt.Println("Available endpoints:")
	fmt.Println("  GET /                    - Handler types overview")
	fmt.Println("  GET /traditional         - Traditional Handler")
	fmt.Println("  GET /html                - HTMLHandler")
	fmt.Println("  GET /api/users           - JSONHandler")
	fmt.Println("  GET /api/status          - JSONHandler (dynamic)")
	fmt.Println("  GET /styles.css          - CSSHandler")
	fmt.Println("  GET /api/data.xml        - XMLHandler")
	fmt.Println("  GET /robots.txt          - TextHandler")
	fmt.Println("  GET /priority-demo       - Priority Demo")
	fmt.Println("  GET /user/123            - HTMLHandler with params")
	fmt.Println("  GET /api/user/123        - JSONHandler with params")

	log.Fatal(http.ListenAndServe(port, r))
}
