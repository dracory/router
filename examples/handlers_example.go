package main

import (
	"fmt"
	"log"
	"net/http"

	"github.com/dracory/rtr"
)

func main() {
	// Create a new router
	router := rtr.NewRouter()

	// Example 1: Traditional Handler (standard HTTP handler)
	router.AddRoute(rtr.Get("/", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "text/html")
		w.Write([]byte("<h1>Welcome to RTR Router!</h1><p>This is a traditional handler.</p>"))
	}))

	// Example 2: HTMLHandler - just return HTML string
	router.AddRoute(rtr.GetHTML("/html", func(w http.ResponseWriter, r *http.Request) string {
		return `
<!DOCTYPE html>
<html>
<head>
    <title>HTML Handler Example</title>
</head>
<body>
    <h1>HTML Handler</h1>
    <p>This HTML was generated by an HTMLHandler that just returns a string!</p>
    <p>The Content-Type header is automatically set to "text/html; charset=utf-8"</p>
</body>
</html>`
	}))

	// Example 3: JSONHandler - just return JSON string
	router.AddRoute(rtr.GetJSON("/api/users", func(w http.ResponseWriter, r *http.Request) string {
		return `{
    "users": [
        {"id": 1, "name": "Alice", "email": "alice@example.com"},
        {"id": 2, "name": "Bob", "email": "bob@example.com"}
    ],
    "total": 2
}`
	}))

	// Example 4: JSONHandler with dynamic content
	router.AddRoute(rtr.GetJSON("/api/status", func(w http.ResponseWriter, r *http.Request) string {
		return fmt.Sprintf(`{
    "status": "ok",
    "timestamp": "%s",
    "server": "rtr-router"
}`, "2024-01-01T12:00:00Z")
	}))

	// Example 5: CSSHandler - return CSS string
	router.AddRoute(rtr.GetCSS("/styles.css", func(w http.ResponseWriter, r *http.Request) string {
		return `
body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    margin: 0;
    padding: 20px;
}

h1 {
    color: #333;
    border-bottom: 2px solid #007acc;
}

.container {
    max-width: 800px;
    margin: 0 auto;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}`
	}))

	// Example 6: XMLHandler - return XML string
	router.AddRoute(rtr.GetXML("/api/data.xml", func(w http.ResponseWriter, r *http.Request) string {
		return `<?xml version="1.0" encoding="UTF-8"?>
<data>
    <users>
        <user id="1">
            <name>Alice</name>
            <email>alice@example.com</email>
        </user>
        <user id="2">
            <name>Bob</name>
            <email>bob@example.com</email>
        </user>
    </users>
</data>`
	}))

	// Example 7: TextHandler - return plain text
	router.AddRoute(rtr.GetText("/robots.txt", func(w http.ResponseWriter, r *http.Request) string {
		return `User-agent: *
Disallow: /admin/
Disallow: /private/
Allow: /

Sitemap: https://example.com/sitemap.xml`
	}))

	// Example 8: Multiple handler types on same route (priority demonstration)
	// This route has both HTMLHandler and JSONHandler - HTMLHandler takes priority
	route := rtr.NewRoute().
		SetMethod("GET").
		SetPath("/priority-demo").
		SetHTMLHandler(func(w http.ResponseWriter, r *http.Request) string {
			return "<h1>HTML Handler</h1><p>This is returned because HTMLHandler has higher priority than JSONHandler</p>"
		}).
		SetJSONHandler(func(w http.ResponseWriter, r *http.Request) string {
			return `{"message": "This JSON won't be returned because HTMLHandler has priority"}`
		})
	router.AddRoute(route)

	// Example 9: Route with parameters using HTMLHandler
	router.AddRoute(rtr.GetHTML("/user/:id", func(w http.ResponseWriter, r *http.Request) string {
		userID, _ := rtr.GetParam(r, "id")
		return fmt.Sprintf(`
<!DOCTYPE html>
<html>
<head>
    <title>User Profile</title>
</head>
<body>
    <h1>User Profile</h1>
    <p>User ID: %s</p>
    <p>This demonstrates HTMLHandler with URL parameters!</p>
</body>
</html>`, userID)
	}))

	// Example 10: Route with parameters using JSONHandler
	router.AddRoute(rtr.GetJSON("/api/user/:id", func(w http.ResponseWriter, r *http.Request) string {
		userID, _ := rtr.GetParam(r, "id")
		return fmt.Sprintf(`{
    "user": {
        "id": "%s",
        "name": "User %s",
        "profile_url": "/user/%s"
    }
}`, userID, userID, userID)
	}))

	fmt.Println("RTR Router with Handler Examples")
	fmt.Println("================================")
	fmt.Println("Server starting on :8080")
	fmt.Println("")
	fmt.Println("Try these URLs:")
	fmt.Println("  http://localhost:8080/           - Traditional Handler")
	fmt.Println("  http://localhost:8080/html       - HTMLHandler")
	fmt.Println("  http://localhost:8080/api/users  - JSONHandler")
	fmt.Println("  http://localhost:8080/api/status - JSONHandler (dynamic)")
	fmt.Println("  http://localhost:8080/styles.css - CSSHandler")
	fmt.Println("  http://localhost:8080/api/data.xml - XMLHandler")
	fmt.Println("  http://localhost:8080/robots.txt - TextHandler")
	fmt.Println("  http://localhost:8080/priority-demo - Priority Demo")
	fmt.Println("  http://localhost:8080/user/123   - HTMLHandler with params")
	fmt.Println("  http://localhost:8080/api/user/123 - JSONHandler with params")
	fmt.Println("")

	log.Fatal(http.ListenAndServe(":8080", router))
}
